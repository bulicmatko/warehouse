{

    // JSCS Configuration File
    // See http://jscs.info/rules.html for more details.

    // ES Next
    "esnext": true,

    // Requires that a function expression be named.
    // http://jscs.info/rule/disallowAnonymousFunctions.html
    // "disallowAnonymousFunctions": true,

    // Disallows arrow functions.
    // http://jscs.info/rule/disallowArrowFunctions.html
    // "disallowArrowFunctions": true,

    // Requires the first alphabetical character of a comment to be lowercase.
    // http://jscs.info/rule/disallowCapitalizedComments.html
    // "disallowCapitalizedComments": true,

    // Disallows commas as last token on a line in lists.
    // http://jscs.info/rule/disallowCommaBeforeLineBreak.html
    // "disallowCommaBeforeLineBreak": true,

    // Disallows curly braces after statements.
    // http://jscs.info/rule/disallowCurlyBraces.html
    // "disallowCurlyBraces": [
    //   "if",
    //   "else",
    //   "while",
    //   "for",
    //   "do",
    //   "with"
    // ],

    // Disallows identifiers that start or end in _.
    // http://jscs.info/rule/disallowDanglingUnderscores.html
    // "disallowDanglingUnderscores": true,

    // Disallows empty blocks (except for catch blocks).
    // http://jscs.info/rule/disallowEmptyBlocks.html
    "disallowEmptyBlocks": true,

    // Disallows function declarations.
    // http://jscs.info/rule/disallowFunctionDeclarations.html
    "disallowFunctionDeclarations": true,

    // Disallows a specified set of identifier names.
    // http://jscs.info/rule/disallowIdentifierNames.html
    // "disallowIdentifierNames": [
    //   "temp",
    //   "foo"
    // ],

    // Disallows implicit type conversion.
    // http://jscs.info/rule/disallowImplicitTypeConversion.html
    "disallowImplicitTypeConversion": [
      "numeric",
      "boolean",
      "binary",
      "string"
    ],

    // Disallows keywords in your comments, such as TODO or FIXME.
    // http://jscs.info/rule/disallowKeywordsInComments.html
    // "disallowKeywordsInComments": [
    //   "TODO",
    //   "FIXME"
    // ],

    // Disallows placing keywords on a new line.
    // http://jscs.info/rule/disallowKeywordsOnNewLine.html
    "disallowKeywordsOnNewLine": [
      "else",
      "while",
      "catch"
    ],

    // Disallows usage of specified keywords.
    // http://jscs.info/rule/disallowKeywords.html
    "disallowKeywords": [
      "with",
      "continue"
    ],

    // Requires lines to not contain both spaces and tabs consecutively, or spaces after tabs only for alignment if "smart".
    // http://jscs.info/rule/disallowMixedSpacesAndTabs.html
    "disallowMixedSpacesAndTabs": true,

    // Disallows multiple blank lines in a row.
    // http://jscs.info/rule/disallowMultipleLineBreaks.html
    "disallowMultipleLineBreaks": true,

    // Disallows strings that span multiple lines without using concatenation.
    // http://jscs.info/rule/disallowMultipleLineStrings.html
    "disallowMultipleLineStrings": true,

    // Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token.
    // http://jscs.info/rule/disallowMultipleSpaces.html
    "disallowMultipleSpaces": {
      "allowEOLComments": true
    },

    // Disallows multiple var declaration (except for-loop).
    // http://jscs.info/rule/disallowMultipleVarDecl.html
    "disallowMultipleVarDecl": true,

    // Disallows unassigned functions to be named inline.
    // http://jscs.info/rule/disallowNamedUnassignedFunctions.html
    "disallowNamedUnassignedFunctions": true,

    // Disallows newline before opening curly brace of all block statements.
    // http://jscs.info/rule/disallowNewlineBeforeBlockStatements.html
    "disallowNewlineBeforeBlockStatements": true,

    // Disallow use of certain node types (from Esprima/ESTree). Esprima node types.
    // http://jscs.info/rule/disallowNodeTypes.html
    // "disallowNodeTypes": [
    //   "LabeledStatement"
    // ],

    // Disallows the not, not equals, and strict not equals operators in conditionals.
    // http://jscs.info/rule/disallowNotOperatorsInConditionals.html
    "disallowNotOperatorsInConditionals": true,

    // Disallows placing object keys on new line.
    // http://jscs.info/rule/disallowObjectKeysOnNewLine.html
    // "disallowObjectKeysOnNewLine": true,

    // Requires putting certain operators on the next line rather than on the current line before a line break.
    // http://jscs.info/rule/disallowOperatorBeforeLineBreak.html
    // "disallowOperatorBeforeLineBreak": [
    //   "+",
    //   "."
    // ],

    // Disallow a newline after blocks.
    // http://jscs.info/rule/disallowPaddingNewLinesAfterBlocks.html
    // "disallowPaddingNewLinesAfterBlocks": true,

    // Disallow a blank line after 'use strict'; statements.
    // http://jscs.info/rule/disallowPaddingNewLinesAfterUseStrict.html
    // "disallowPaddingNewLinesAfterUseStrict": true,

    // Disallows newline before module.exports.
    // http://jscs.info/rule/disallowPaddingNewLinesBeforeExport.html
    // "disallowPaddingNewLinesBeforeExport": true,

    // Disallow an empty line above the specified keywords.
    // http://jscs.info/rule/disallowPaddingNewlinesBeforeKeywords.html
    // "disallowPaddingNewlinesBeforeKeywords": [
    //   "do",
    //   "for",
    //   "if",
    //   "else",
    //   "switch",
    //   "case",
    //   "try",
    //   "catch",
    //   "void",
    //   "while",
    //   "with",
    //   "return",
    //   "typeof",
    //   "function"
    // ],

    // Disallows newline before line comments.
    // http://jscs.info/rule/disallowPaddingNewLinesBeforeLineComments.html
    // "disallowPaddingNewLinesBeforeLineComments": true,

    // Disallows blocks from beginning or ending with 2 newlines.
    // http://jscs.info/rule/disallowPaddingNewlinesInBlocks.html
    // "disallowPaddingNewlinesInBlocks": true,

    // Disallows newlines adjacent to curly braces in all object literals.
    // http://jscs.info/rule/disallowPaddingNewLinesInObjects.html
    // "disallowPaddingNewLinesInObjects": true,

    // Disallows parentheses around arrow function expressions with a single parameter.
    // http://jscs.info/rule/disallowParenthesesAroundArrowParam.html
    "disallowParenthesesAroundArrowParam": true,

    // Disallows quoted keys in object if possible.
    // http://jscs.info/rule/disallowQuotedKeysInObjects.html
    "disallowQuotedKeysInObjects": true,

    // Disallows lines from ending in a semicolon.
    // http://jscs.info/rule/disallowSemicolons.html
    // "disallowSemicolons": true,

    // Require arrow functions to use a block statement (explicit return).
    // http://jscs.info/rule/disallowShorthandArrowFunctions.html
    // "disallowShorthandArrowFunctions": true,

    // Requires sticking binary operators to the right.
    // http://jscs.info/rule/disallowSpaceAfterBinaryOperators.html
    "disallowSpaceAfterBinaryOperators": true,

    // Disallows space after keyword.
    // http://jscs.info/rule/disallowSpaceAfterKeywords.html
    "disallowSpaceAfterKeywords": true,

    // Requires that a line comment (//) not be followed by a space.
    // http://jscs.info/rule/disallowSpaceAfterLineComment.html
    // "disallowSpaceAfterLineComment": true,

    // Disallows space after object keys.
    // http://jscs.info/rule/disallowSpaceAfterObjectKeys.html
    "disallowSpaceAfterObjectKeys": true,

    // Requires sticking unary operators to the right.
    // http://jscs.info/rule/disallowSpaceAfterPrefixUnaryOperators.html
    "disallowSpaceAfterPrefixUnaryOperators": true,

    // Requires sticking binary operators to the left.
    // http://jscs.info/rule/disallowSpaceBeforeBinaryOperators.html
    "disallowSpaceBeforeBinaryOperators": [
      ",",
      ":"
    ],

    // Disallows space before block statements (for loops, control structures).
    // http://jscs.info/rule/disallowSpaceBeforeBlockStatements.html
    // "disallowSpaceBeforeBlockStatements": true,

    // Disallows spaces before commas.
    // http://jscs.info/rule/disallowSpaceBeforeComma.html
    "disallowSpaceBeforeComma": true,

    // Disallows space before keyword.
    // http://jscs.info/rule/disallowSpaceBeforeKeywords.html
    // "disallowSpaceBeforeKeywords": true,

    // Disallows space after object keys.
    // http://jscs.info/rule/disallowSpaceBeforeObjectValues.html
    // "disallowSpaceBeforeObjectValues": true,

    // Requires sticking unary operators to the left.
    // http://jscs.info/rule/disallowSpaceBeforePostfixUnaryOperators.html
    "disallowSpaceBeforePostfixUnaryOperators": true,

    // Disallows spaces before semicolons.
    // http://jscs.info/rule/disallowSpaceBeforeSemicolon.html
    "disallowSpaceBeforeSemicolon": true,

    // Ensure there are no spaces after argument separators in call expressions.
    // http://jscs.info/rule/disallowSpaceBetweenArguments.html
    // "disallowSpaceBetweenArguments": true,

    // Disallows space before () or {} in anonymous function expressions.
    // http://jscs.info/rule/disallowSpacesInAnonymousFunctionExpression.html
    // "disallowSpacesInAnonymousFunctionExpression": {
    //   "beforeOpeningRoundBrace": true,
    //   "beforeOpeningCurlyBrace": true
    // },

    // Disallows space before () in call expressions.
    // http://jscs.info/rule/disallowSpacesInCallExpression.html
    "disallowSpacesInCallExpression": true,

    // Disallows space before and/or after ? or : in conditional expressions.
    // http://jscs.info/rule/disallowSpacesInConditionalExpression.html
    // "disallowSpacesInConditionalExpression": true,

    // Disallow spaces in between for statement.
    // http://jscs.info/rule/disallowSpacesInForStatement.html
    // "disallowSpacesInForStatement": true,

    // Disallows space before () or {} in function declarations.
    // http://jscs.info/rule/disallowSpacesInFunctionDeclaration.html
    // "disallowSpacesInFunctionDeclaration": {
    //   "beforeOpeningRoundBrace": true,
    //   "beforeOpeningCurlyBrace": true
    // },

    // Disallows space before () or {} in function expressions (both named and anonymous).
    // http://jscs.info/rule/disallowSpacesInFunctionExpression.html
    // "disallowSpacesInFunctionExpression": {
    //   "beforeOpeningRoundBrace": true,
    //   "beforeOpeningCurlyBrace": true
    // },

    // Expression.
    // http://jscs.info/rule/disallowSpacesInFunction.html
    // "disallowSpacesInFunction": {
    //   "beforeOpeningRoundBrace": true,
    //   "beforeOpeningCurlyBrace": true
    // },

    // Disallows space before () or {} in named function expressions.
    // http://jscs.info/rule/disallowSpacesInNamedFunctionExpression.html
    // "disallowSpacesInNamedFunctionExpression": {
    //   "beforeOpeningRoundBrace": true,
    //   "beforeOpeningCurlyBrace": true
    // },

    // Disallows space after opening array square bracket and before closing. Reports only on arrays, not on property accessors.
    // Use disallowSpacesInsideBrackets to report on all brackets.
    // http://jscs.info/rule/disallowSpacesInsideArrayBrackets.html
    "disallowSpacesInsideArrayBrackets": true,

    // Disallows space after opening square bracket and before closing. Reports on all on brackets, even on property accessors.
    // Use disallowSpacesInsideArrayBrackets to exclude property accessors.
    // http://jscs.info/rule/disallowSpacesInsideBrackets.html
    "disallowSpacesInsideBrackets": true,

    // Disallows space after opening object curly brace and before closing.
    // http://jscs.info/rule/disallowSpacesInsideObjectBrackets.html
    "disallowSpacesInsideObjectBrackets": true,

    // Disallows space after opening round bracket and before closing.
    // http://jscs.info/rule/disallowSpacesInsideParentheses.html
    "disallowSpacesInsideParentheses": true,

    // Disallows an extra comma following the final element of an array or object literal.
    // http://jscs.info/rule/disallowTrailingComma.html
    "disallowTrailingComma": true,

    // Requires all lines to end on a non-whitespace character.
    // http://jscs.info/rule/disallowTrailingWhitespace.html
    "disallowTrailingWhitespace": true,

    // Requires the variable to be the left hand operator when doing a boolean comparison.
    // http://jscs.info/rule/disallowYodaConditions.html
    "disallowYodaConditions": true,

    // Validate jsdoc comments.
    // http://jscs.info/rule/jsDoc.html
    "jsDoc": {
      "checkAnnotations": "closurecompiler",
      "checkParamNames": true,
      "requireParamTypes": true,
      "checkRedundantParams": true,
      "checkReturnTypes": true,
      "checkRedundantReturns": true,
      "requireReturnTypes": true,
      "checkTypes": "capitalizedNativeCase",
      "checkRedundantAccess": true,
      "requireNewlineAfterDescription": true
    },

    // Requires all lines to be at most the number of characters specified.
    // http://jscs.info/rule/maximumLineLength.html
    "maximumLineLength": {
      "value": 80,
      "tabSize": 4,
      "allExcept": [
        "regex",
        "comments",
        "urlComments",
        "functionSignature",
        "require"
      ]
    },

    // Requires the file to be at most the number of lines specified.
    // http://jscs.info/rule/maximumNumberOfLines.html
    "maximumNumberOfLines": 100,

    // Requires proper alignment in object literals.
    // http://jscs.info/rule/requireAlignedObjectValues.html
    // "requireAlignedObjectValues": "all",

    // Requires that a function expression be anonymous.
    // http://jscs.info/rule/requireAnonymousFunctions.html
    "requireAnonymousFunctions": true,

    // Requires that arrow functions are used instead of anonymous function expressions in callbacks.
    // http://jscs.info/rule/requireArrowFunctions.html
    "requireArrowFunctions": true,

    // Requires blocks to begin and end with a newline.
    // http://jscs.info/rule/requireBlocksOnNewline.html
    "requireBlocksOnNewline": 1,

    // Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES.
    // http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers.html
    "requireCamelCaseOrUpperCaseIdentifiers": true,

    // Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.
    // http://jscs.info/rule/requireCapitalizedComments.html
    "requireCapitalizedComments": {
      "allExcept": [
        "jshint"
      ]
    },

    // Requires constructors to be capitalized (except for this).
    // http://jscs.info/rule/requireCapitalizedConstructors.html
    "requireCapitalizedConstructors": true,

    // Requires commas as last token on a line in lists.
    // http://jscs.info/rule/requireCommaBeforeLineBreak.html
    "requireCommaBeforeLineBreak": true,

    // Requires curly braces after statements.
    // http://jscs.info/rule/requireCurlyBraces.html
    "requireCurlyBraces": true,

    // Require a $ before variable names that are jquery assignments.
    // http://jscs.info/rule/requireDollarBeforejQueryAssignment.html
    "requireDollarBeforejQueryAssignment": true,

    // Requires member expressions to use dot notation when possible.
    // http://jscs.info/rule/requireDotNotation.html
    "requireDotNotation": true,

    // Requires function declarations by disallowing assignment of functions expressions to variables.
    // Function expressions are allowed in all other contexts, including when passed as function arguments or immediately invoked.
    // http://jscs.info/rule/requireFunctionDeclarations.html
    // "requireFunctionDeclarations": true,

    // Requires placing keywords on a new line.
    // http://jscs.info/rule/requireKeywordsOnNewLine.html
    // "requireKeywordsOnNewLine": true,

    // Requires placing line feed after assigning a variable.
    // http://jscs.info/rule/requireLineBreakAfterVariableAssignment.html
    "requireLineBreakAfterVariableAssignment": true,

    // Requires placing line feed at file end.
    // http://jscs.info/rule/requireLineFeedAtFileEnd.html
    "requireLineFeedAtFileEnd": true,

    // Requires function names to match member and property names.
    // http://jscs.info/rule/requireMatchingFunctionName.html
    // "requireMatchingFunctionName": true,

    // Requires multiple var declaration.
    // http://jscs.info/rule/requireMultipleVarDecl.html
    "requireMultipleVarDecl": "onevar",

    // Require unassigned functions to be named inline.
    // http://jscs.info/rule/requireNamedUnassignedFunctions.html
    // "requireNamedUnassignedFunctions": true,

    // Requires newline before opening curly brace of all block statements.
    // http://jscs.info/rule/requireNewlineBeforeBlockStatements.html
    // "requireNewlineBeforeBlockStatements": true,

    // Requires use of binary, hexadecimal, and octal literals instead of parseInt.
    // http://jscs.info/rule/requireNumericLiterals.html
    // "requireNumericLiterals": true,

    // Requires placing object keys on new line.
    // http://jscs.info/rule/requireObjectKeysOnNewLine.html
    "requireObjectKeysOnNewLine": true,

    // Requires operators to appear before line breaks and not after.
    // http://jscs.info/rule/requireOperatorBeforeLineBreak.html
    "requireOperatorBeforeLineBreak": true,

    // Requires an extra blank newline after var declarations, as long as it is not the last expression in the current block.
    // http://jscs.info/rule/requirePaddingNewLineAfterVariableDeclaration.html
    "requirePaddingNewLineAfterVariableDeclaration": true,

    // Requires newline after blocks.
    // http://jscs.info/rule/requirePaddingNewLinesAfterBlocks.html
    "requirePaddingNewLinesAfterBlocks": true,

    // Requires a blank line after 'use strict'; statements.
    // http://jscs.info/rule/requirePaddingNewLinesAfterUseStrict.html
    "requirePaddingNewLinesAfterUseStrict": true,

    // Requires newline before module.exports.
    // http://jscs.info/rule/requirePaddingNewLinesBeforeExport.html
    "requirePaddingNewLinesBeforeExport": true,

    // Requires an empty line above the specified keywords unless the keyword is the first expression in a block.
    // http://jscs.info/rule/requirePaddingNewlinesBeforeKeywords.html
    "requirePaddingNewlinesBeforeKeywords": true,

    // Requires newline before line comments.
    // http://jscs.info/rule/requirePaddingNewLinesBeforeLineComments.html
    "requirePaddingNewLinesBeforeLineComments": true,

    // Requires blocks to begin and end with 2 newlines.
    // http://jscs.info/rule/requirePaddingNewlinesInBlocks.html
    "requirePaddingNewlinesInBlocks": 1,

    // Requires newline inside curly braces of all objects.
    // http://jscs.info/rule/requirePaddingNewLinesInObjects.html
    "requirePaddingNewLinesInObjects": true,

    // Requires parentheses around arrow function expressions with a single parameter.
    // http://jscs.info/rule/requireParenthesesAroundArrowParam.html
    "requireParenthesesAroundArrowParam": true,

    // Requires parentheses around immediately invoked function expressions.
    // http://jscs.info/rule/requireParenthesesAroundIIFE.html
    "requireParenthesesAroundIIFE": true,

    // Requires quoted keys in objects.
    // http://jscs.info/rule/requireQuotedKeysInObjects.html
    // "requireQuotedKeysInObjects": true,

    // Requires semicolon.
    // http://jscs.info/rule/requireSemicolons.html
    "requireSemicolons": true,

    // Require arrow functions to use an expression body when returning a single statement (no block statement, implicit return).
    // http://jscs.info/rule/requireShorthandArrowFunctions.html
    "requireShorthandArrowFunctions": true,

    // Disallows sticking binary operators to the right.
    // http://jscs.info/rule/requireSpaceAfterBinaryOperators.html
    "requireSpaceAfterBinaryOperators": true,

    // Requires space after keyword.
    // http://jscs.info/rule/requireSpaceAfterKeywords.html
    "requireSpaceAfterKeywords": true,

    // Requires that a line comment (//) be followed by a space.
    // http://jscs.info/rule/requireSpaceAfterLineComment.html
    "requireSpaceAfterLineComment": true,

    // Requires space after object keys.
    // http://jscs.info/rule/requireSpaceAfterObjectKeys.html
    // "requireSpaceAfterObjectKeys": true,

    // Disallows sticking unary operators to the right.
    // http://jscs.info/rule/requireSpaceAfterPrefixUnaryOperators.html
    // "requireSpaceAfterPrefixUnaryOperators": true,

    // Disallows sticking binary operators to the left.
    // http://jscs.info/rule/requireSpaceBeforeBinaryOperators.html
    "requireSpaceBeforeBinaryOperators": true,

    // Requires space(s) before block statements (for loops, control structures).
    // http://jscs.info/rule/requireSpaceBeforeBlockStatements.html
    "requireSpaceBeforeBlockStatements": true,

    // Requires space before comma.
    // http://jscs.info/rule/requireSpaceBeforeComma.html
    // "requireSpaceBeforeComma": true,

    // Requires space before keyword.
    // http://jscs.info/rule/requireSpaceBeforeKeywords.html
    "requireSpaceBeforeKeywords": true,

    // Requires space after object keys.
    // http://jscs.info/rule/requireSpaceBeforeObjectValues.html
    "requireSpaceBeforeObjectValues": true,

    // Disallows sticking unary operators to the left.
    // http://jscs.info/rule/requireSpaceBeforePostfixUnaryOperators.html
    // "requireSpaceBeforePostfixUnaryOperators": true,

    // Ensure there are spaces after argument separators in call expressions.
    // http://jscs.info/rule/requireSpaceBetweenArguments.html
    "requireSpaceBetweenArguments": true,

    // Requires space before () or {} in anonymous function expressions.
    // http://jscs.info/rule/requireSpacesInAnonymousFunctionExpression.html
    "requireSpacesInAnonymousFunctionExpression": {
      "beforeOpeningRoundBrace": true,
      "beforeOpeningCurlyBrace": true
    },

    // Requires space before () in call expressions.
    // http://jscs.info/rule/requireSpacesInCallExpression.html
    // "requireSpacesInCallExpression": true,

    // Requires space before and/or after ? or : in conditional expressions.
    // http://jscs.info/rule/requireSpacesInConditionalExpression.html
    "requireSpacesInConditionalExpression": true,

    // Requires spaces inbetween for statement.
    // http://jscs.info/rule/requireSpacesInForStatement.html
    "requireSpacesInForStatement": true,

    // Requires space before () or {} in function declarations.
    // http://jscs.info/rule/requireSpacesInFunctionDeclaration.html
    "requireSpacesInFunctionDeclaration": {
      "beforeOpeningRoundBrace": true,
      "beforeOpeningCurlyBrace": true
    },

    // Requires space before () or {} in function expressions (both named and anonymous).
    // http://jscs.info/rule/requireSpacesInFunctionExpression.html
    "requireSpacesInFunctionExpression": {
      "beforeOpeningRoundBrace": true,
      "beforeOpeningCurlyBrace": true
    },

    // Expression.
    // http://jscs.info/rule/requireSpacesInFunction.html
    "requireSpacesInFunction": {
      "beforeOpeningRoundBrace": true,
      "beforeOpeningCurlyBrace": true
    },

    // Requires space before () or {} in named function expressions.
    // http://jscs.info/rule/requireSpacesInNamedFunctionExpression.html
    "requireSpacesInNamedFunctionExpression": {
      "beforeOpeningRoundBrace": true,
      "beforeOpeningCurlyBrace": true
    },

    // Requires space after opening array square bracket and before closing. Reports only on arrays, not on property accessors.
    // Use requireSpacesInsideBrackets to report on all brackets.
    // http://jscs.info/rule/requireSpacesInsideArrayBrackets.html
    // "requireSpacesInsideArrayBrackets": "all",

    // Requires space after opening square bracket and before closing. Reports on all on brackets, even on property accessors.
    // Use requireSpacesInsideArrayBrackets to exclude property accessors.
    // http://jscs.info/rule/requireSpacesInsideBrackets.html
    // "requireSpacesInsideBrackets": true,

    // Requires space after opening object curly brace and before closing.
    // http://jscs.info/rule/requireSpacesInsideObjectBrackets.html
    // "requireSpacesInsideObjectBrackets": "all",

    // Requires space after opening round bracket and before closing.
    // http://jscs.info/rule/requireSpacesInsideParentheses.html
    // "requireSpacesInsideParentheses": "all",

    // Disallows using .apply in favor of the spread operator.
    // http://jscs.info/rule/requireSpread.html
    "requireSpread": true,

    // Requires the use of template strings instead of string concatenation.
    // http://jscs.info/rule/requireTemplateStrings.html
    "requireTemplateStrings": true,

    // Requires an extra comma following the final element of an array or object literal.
    // http://jscs.info/rule/requireTrailingComma.html
    // "requireTrailingComma": true,

    // Requires var declaration to be on the top of an enclosing scope.
    // http://jscs.info/rule/requireVarDeclFirst.html
    "requireVarDeclFirst": true,

    // Requires the variable to be the right hand operator when doing a boolean comparison
    // http://jscs.info/rule/requireYodaConditions.html
    // "requireYodaConditions": true,

    // Option to check 'var that = this' expressions.
    // http://jscs.info/rule/safeContextKeyword.html
    "safeContextKeyword": "_this",

    // Validates proper alignment of function parameters.
    // http://jscs.info/rule/validateAlignedFunctionParameters.html
    "validateAlignedFunctionParameters": {
      "lineBreakAfterOpeningBrace": true,
      "lineBreakBeforeClosingBrace": true
    },

    // Validates indentation for switch statements and block statements.
    // http://jscs.info/rule/validateIndentation.html
    "validateIndentation": 4,

    // Option to check line break characters.
    // http://jscs.info/rule/validateLineBreaks.html
    "validateLineBreaks": "LF",

    // Requires each element in array on a single line when array length is more than passed maximum number or array fills more than one line.
    // Set ignoreBrackets to true to allow elements on the same line with brackets.
    // http://jscs.info/rule/validateNewlineAfterArrayElements.html
    "validateNewlineAfterArrayElements": {
      "maximum": 5
    },

    // Validates the order in object keys.
    // http://jscs.info/rule/validateOrderInObjectKeys.html
    // "validateOrderInObjectKeys": "asc",

    // Enable validation of separators between function parameters. Will ignore newlines.
    // http://jscs.info/rule/validateParameterSeparator.html
    "validateParameterSeparator": ", ",

    // Requires all quote marks to be either the supplied value, or consistent if true.
    // http://jscs.info/rule/validateQuoteMarks.html
    "validateQuoteMarks": "'"

  }
